
  .BANK 0 SLOT 0
  .ORG $0000

  .SECTION "main" FREE
    ; =================================================================
    ; ../test2.blb:16: void main(void) {
    ; =================================================================
    main:
      ; A  - tmp
      ; BC - tmp
      ; DE - frame pointer
      ; HL - tmp
      ; SP - stack pointer
      ; IX - tmp
      ; IY - tmp
      ; allocate space for the stack frame
      LD  HL,-7
      ADD HL,DE
      LD  SP,HL
      ; =================================================================
      ; ../test2.blb:19: u8 color = 0;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: variable "_color_1" size 1 offset -4 type n
      ; -----------------------------------------------------------------
      ; -----------------------------------------------------------------
      ; TAC: color.uint8 (uint8) := 0.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -4
      LD  IX,0
      ADD IX,DE
      LD  (IX-4),0
      ; =================================================================
      ; ../test2.blb:20: u8 i;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: variable "_i_2" size 1 offset -5 type n
      ; -----------------------------------------------------------------
      ; =================================================================
      ; ../test2.blb:22: initialize_adder(&g_adder);
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint16) := &g_adder.uint16 (uint16)
      ; -----------------------------------------------------------------
      LD  HL,g_adder
      ; offset -7
      LD  (IX-7),L
      LD  (IX-6),H
      ; -----------------------------------------------------------------
      ; TAC: initialize_adder(r0.uint16)
      ; -----------------------------------------------------------------
      LD  HL,0
      ADD HL,SP
      DEC HL
      LD  BC,_return_1
      PUSH BC
      PUSH DE
      ; new stack frame -> IX
      LD  IX,0
      LD  B,H
      LD  C,L
      ADD IX,BC
      ; old stack frame -> IY
      LD  IY,0
      ADD IY,DE
      ; copy argument 1
      LD  C,(IY-7)
      LD  B,(IY-6)
      LD  (IX-5),C
      LD  (IX-4),B
      ; new stack frame -> DE
      LD  D,H
      LD  E,L
      JP  initialize_adder__static_____test2_blb_612100376
    _return_1:
      ; new stack frame -> IX
      LD  IX,0
      ADD IX,DE
      ; old stack frame address -> DE
      LD  E,(IX-3)
      LD  D,(IX-2)
      ; =================================================================
      ; ../test2.blb:24: while (1) {
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: _label_1:
      ; -----------------------------------------------------------------
    _label_1:
      ; =================================================================
      ; ../test2.blb:25: __z80_out[0xBF] = 0x00;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: __z80_out.uint8 (uint8)[191.uint8 (uint8)] := 0.uint8 (uint8)
      ; -----------------------------------------------------------------
      LD  A,0
      OUT ($BF),A
      ; =================================================================
      ; ../test2.blb:26: __z80_out[0xBF] = 0xC0;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: __z80_out.uint8 (uint8)[191.uint8 (uint8)] := 192.uint8 (uint8)
      ; -----------------------------------------------------------------
      LD  A,192
      OUT ($BF),A
      ; =================================================================
      ; ../test2.blb:28: for (i = 0; i < sizeof(array); i++)
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: i.uint8 (uint8) := 0.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -5
      LD  IX,0
      ADD IX,DE
      LD  (IX-5),0
      ; -----------------------------------------------------------------
      ; TAC: _label_3:
      ; -----------------------------------------------------------------
    _label_3:
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint8) := 0.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  (IX-7),0
      LD  (IX-6),0
      ; -----------------------------------------------------------------
      ; TAC: if i.uint8 (uint8) < 32.uint8 (uint8) jmp _label_6
      ; -----------------------------------------------------------------
      ; offset -5
      LD  A,(IX-5)
      LD  B,32
      SUB A,B
      JP  C,_label_6
      ; -----------------------------------------------------------------
      ; TAC: jmp _label_7
      ; -----------------------------------------------------------------
      JP  _label_7
      ; -----------------------------------------------------------------
      ; TAC: _label_6:
      ; -----------------------------------------------------------------
    _label_6:
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint8) := 1.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  (IX-7),1
      LD  (IX-6),0
      ; -----------------------------------------------------------------
      ; TAC: _label_7:
      ; -----------------------------------------------------------------
    _label_7:
      ; -----------------------------------------------------------------
      ; TAC: if r0.uint16 (uint8) == 0.uint8 (uint8) jmp _label_5
      ; -----------------------------------------------------------------
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  A,(IX-7)
      LD  B,0
      SUB A,B
      JP  Z,_label_5
      ; =================================================================
      ; ../test2.blb:29: if (i < 32)
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint8) := 0.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -7
      LD  (IX-7),0
      LD  (IX-6),0
      ; -----------------------------------------------------------------
      ; TAC: if i.uint8 (uint8) < 32.uint8 (uint8) jmp _label_10
      ; -----------------------------------------------------------------
      ; offset -5
      LD  A,(IX-5)
      LD  B,32
      SUB A,B
      JP  C,_label_10
      ; -----------------------------------------------------------------
      ; TAC: jmp _label_11
      ; -----------------------------------------------------------------
      JP  _label_11
      ; -----------------------------------------------------------------
      ; TAC: _label_10:
      ; -----------------------------------------------------------------
    _label_10:
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint8) := 1.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  (IX-7),1
      LD  (IX-6),0
      ; -----------------------------------------------------------------
      ; TAC: _label_11:
      ; -----------------------------------------------------------------
    _label_11:
      ; -----------------------------------------------------------------
      ; TAC: if r0.uint16 (uint8) == 0.uint8 (uint8) jmp _label_9
      ; -----------------------------------------------------------------
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  A,(IX-7)
      LD  B,0
      SUB A,B
      JP  Z,_label_9
      ; =================================================================
      ; ../test2.blb:30: __z80_out[0xBE] = color;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: __z80_out.uint8 (uint8)[190.uint8 (uint8)] := color.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -4
      LD  A,(IX-4)
      OUT ($BE),A
      ; -----------------------------------------------------------------
      ; TAC: _label_9:
      ; -----------------------------------------------------------------
    _label_9:
      ; -----------------------------------------------------------------
      ; TAC: _label_4:
      ; -----------------------------------------------------------------
    _label_4:
      ; -----------------------------------------------------------------
      ; TAC: i.uint8 (uint8) := i.uint8 (uint8) + 1.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -5
      LD  IX,0
      ADD IX,DE
      LD  A,(IX-5)
      INC A
      ; offset -5
      LD  (IX-5),A
      ; -----------------------------------------------------------------
      ; TAC: jmp _label_3
      ; -----------------------------------------------------------------
      JP  _label_3
      ; -----------------------------------------------------------------
      ; TAC: _label_5:
      ; -----------------------------------------------------------------
    _label_5:
      ; =================================================================
      ; ../test2.blb:32: add_to_color(&color, g_adder);
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: r0.uint16 (uint16) := &color.uint16 (uint16)
      ; -----------------------------------------------------------------
      ; offset -4
      LD  HL,-4
      ADD HL,DE
      ; offset -7
      LD  IX,0
      ADD IX,DE
      LD  (IX-7),L
      LD  (IX-6),H
      ; -----------------------------------------------------------------
      ; TAC: add_to_color(r0.uint16, g_adder.int8 (int8))
      ; -----------------------------------------------------------------
      LD  HL,0
      ADD HL,SP
      DEC HL
      LD  BC,_return_2
      PUSH BC
      PUSH DE
      ; new stack frame -> IX
      LD  IX,0
      LD  B,H
      LD  C,L
      ADD IX,BC
      ; old stack frame -> IY
      LD  IY,0
      ADD IY,DE
      ; copy argument 1
      LD  C,(IY-7)
      LD  B,(IY-6)
      LD  (IX-5),C
      LD  (IX-4),B
      ; copy argument 2
      LD  IY,g_adder
      LD  C,(IY+0)
      LD  (IX-6),C
      ; new stack frame -> DE
      LD  D,H
      LD  E,L
      JP  add_to_color
    _return_2:
      ; new stack frame -> IX
      LD  IX,0
      ADD IX,DE
      ; old stack frame address -> DE
      LD  E,(IX-3)
      LD  D,(IX-2)
      ; -----------------------------------------------------------------
      ; TAC: jmp _label_1
      ; -----------------------------------------------------------------
      JP  _label_1
  .ENDS

  .SECTION "initialize_adder__static_____test2_blb_612100376" FREE
    ; =================================================================
    ; ../test2.blb:37: static void initialize_adder(s8 *adder) {
    ; =================================================================
    initialize_adder__static_____test2_blb_612100376:
      ; A  - tmp
      ; BC - tmp
      ; DE - frame pointer
      ; HL - tmp
      ; SP - stack pointer
      ; IX - tmp
      ; IY - tmp
      ; allocate space for the stack frame
      LD  HL,-5
      ADD HL,DE
      LD  SP,HL
      ; -----------------------------------------------------------------
      ; TAC: variable "adder" size 2 offset -5 type a
      ; -----------------------------------------------------------------
      ; =================================================================
      ; ../test2.blb:39: adder[0] = 1;
      ; =================================================================
      ; -----------------------------------------------------------------
      ; TAC: adder.uint16 (int8)[0.uint8 (uint8)] := 1.uint8 (uint8)
      ; -----------------------------------------------------------------
      ; offset -5
      LD  IY,0
      ADD IY,DE
      LD  C,(IY-5)
      LD  B,(IY-4)
      LD  IY,0
      ADD IY,BC
      LD  (IY+0),1
      ; -----------------------------------------------------------------
      ; TAC: return
      ; -----------------------------------------------------------------
      ; bytes -1 and 0 of stack frame contain the return address
      LD  HL,-1
      ADD HL,DE
      LD  SP,HL
      RET
  .ENDS

  .SECTION "mainmain" FREE
    ; =================================================================
    ; INTERNAL
    ; =================================================================
    mainmain:
      ; A  - tmp
      ; BC - tmp
      ; DE - frame pointer
      ; HL - tmp
      ; SP - stack pointer
      ; IX - tmp
      ; IY - tmp
      ; -----------------------------------------------------------------
      ; TAC: main()
      ; -----------------------------------------------------------------
      LD  HL,0
      ADD HL,SP
      DEC HL
      LD  BC,_return_3
      PUSH BC
      PUSH DE
      ; new stack frame -> DE
      LD  D,H
      LD  E,L
      JP  main
    _return_3:
      ; new stack frame -> IX
      LD  IX,0
      ADD IX,DE
      ; old stack frame address -> DE
      LD  E,(IX-3)
      LD  D,(IX-2)
      ; -----------------------------------------------------------------
      ; TAC: _label_12:
      ; -----------------------------------------------------------------
    _label_12:
      ; -----------------------------------------------------------------
      ; TAC: jmp _label_12
      ; -----------------------------------------------------------------
      JP  _label_12
  .ENDS

