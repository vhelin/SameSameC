
u8 g_hello[8];

#define ONE(var1, var2) \
            (var1-var2)

extern void add_to_color(u8 *color, u8 adder);
extern s8 g_adder;

void main(void) {

  u8 array[32];
  u8 color = 0;
  u8 i = sizeof(g_block);

  initialize_adder(&g_adder);

/*
  do {
    __z80_out[0xBF] = 0x00;
    __z80_out[0xBF] = 0xC0;

    for (i = 0; i < sizeof(array); i++)
      if (i < 64/2)
        __z80_out[0xBE] = color;

    add_to_color(&color, g_adder);
  } while (1);
*/
}

struct block {
  u8 value1;
  u8 value2;
  u8 value3;
  union {
    u16 partA;
    u16 partB;
    u8  arrayC[8];
    struct {
      u8 hello1;
      u8 hello2;
      u8 hello3;
      u8 hello4;
    };
  };
  struct {
    u8  health;
    u16 armor;
  } melon[1+1+2];
  u16 array[8];
  struct block *next;
} g_block;

struct simple {
  u8 value1;
  u8 values[2];
  u8 value2;
};

static void initialize_adder(s8 *adder) {

  const struct simple g_simple[] = { { 0, { 1+1, 3 }, 4 },
                                     { 1, { 2+2, 6 }, 8 } };
  adder[0] = 1;

  g_block.melon[2].armor++;
  //g_block.array[0+1+2+adder[0]]++;
}
