
void convertNumbersToChars16(u16 value, u8 *chars, u8 *index);

void calculateAndPrint4(u8 *chars, u8 one, u8 zero) {

  u16 index = 0;

  //////////////////////////////////////////////////////////////////////////////////////////
  // $1C9E = $1C9E = $1C9E = $1C9E
  //////////////////////////////////////////////////////////////////////////////////////////

  chars[index++] = 0x04; // '$'
  chars[index++] = 0x00;

  convertNumbersToChars16(0x1C9E, chars, &index); // "1C9E"

  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;
  chars[index++] = 0x1D; // '='
  chars[index++] = 0x00;
  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;

  chars[index++] = 0x04; // '$'
  chars[index++] = 0x00;
  
  s16 result = -(-666 * (-(-11)));
  convertNumbersToChars16(result, chars, &index); // "1C9E"

  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;
  chars[index++] = 0x1D; // '='
  chars[index++] = 0x00;
  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;

  chars[index++] = 0x04; // '$'
  chars[index++] = 0x00;

  s16 var1 = -666;
  u8  var2 = 11;

  result = -(var1 * (-(-var2)));
  result = -result;
  result = -result;
  convertNumbersToChars16(result, chars, &index); // "1C9E"

  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;
  chars[index++] = 0x1D; // '='
  chars[index++] = 0x00;
  chars[index++] = 0x00; // ' '
  chars[index++] = 0x00;

  chars[index++] = 0x04; // '$'
  chars[index++] = 0x00;

  result = -((var1 - zero) * (-(-(var2 - one + zero + one))));
  result = -result | zero;
  result = -result + one - one;
  convertNumbersToChars16(result, chars, &index); // "1C9E"

  // output line
  u8 i;

  __z80_out[0xBF] = 0x00;
  __z80_out[0xBF] = 0x44 | 0x38;
  for (i = 0; i < index; i++)
    __z80_out[0xBE] = chars[i];
}
